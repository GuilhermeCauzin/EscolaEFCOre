// <auto-generated />
using System;
using EscolaEFCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EscolaEFCore.Migrations
{
    [DbContext(typeof(EscolaContext))]
    [Migration("20240127193709_primeira")]
    partial class primeira
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entidades.Aluno", b =>
                {
                    b.Property<int>("RM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RM");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RM"));

                    b.Property<int>("ClasseId")
                        .HasColumnType("int")
                        .HasColumnName("Classe");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int")
                        .HasColumnName("Escola");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Senha");

                    b.HasKey("RM");

                    b.HasIndex("ClasseId");

                    b.HasIndex("EscolaId");

                    b.ToTable("TB_Aluno", (string)null);
                });

            modelBuilder.Entity("Entidades.Aula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasseId")
                        .HasColumnType("int")
                        .HasColumnName("Classe");

                    b.Property<TimeSpan>("HorarioInicio")
                        .HasColumnType("time")
                        .HasColumnName("HorarioInicio");

                    b.Property<TimeSpan>("HorarioTermino")
                        .HasColumnType("time")
                        .HasColumnName("HorarioTermino");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int")
                        .HasColumnName("ProfessorId");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("TB_Aula", (string)null);
                });

            modelBuilder.Entity("Entidades.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("TB_Classe", (string)null);
                });

            modelBuilder.Entity("Entidades.Escola", b =>
                {
                    b.Property<int>("UnidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnidadeId"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome");

                    b.HasKey("UnidadeId");

                    b.ToTable("TB_Escola", (string)null);
                });

            modelBuilder.Entity("Entidades.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int")
                        .HasColumnName("Escola");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("TB_Professor", (string)null);
                });

            modelBuilder.Entity("Entidades.Aluno", b =>
                {
                    b.HasOne("Entidades.Classe", "Classe")
                        .WithMany("AlunosLista")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Escola", "Escola")
                        .WithMany("AlunosLista")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("Entidades.Aula", b =>
                {
                    b.HasOne("Entidades.Classe", "Classe")
                        .WithMany("AulaLista")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Professor", "Professor")
                        .WithMany("ListaAulas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Entidades.Professor", b =>
                {
                    b.HasOne("Entidades.Escola", "Escola")
                        .WithMany("ProfessoresLista")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("Entidades.Classe", b =>
                {
                    b.Navigation("AlunosLista");

                    b.Navigation("AulaLista");
                });

            modelBuilder.Entity("Entidades.Escola", b =>
                {
                    b.Navigation("AlunosLista");

                    b.Navigation("ProfessoresLista");
                });

            modelBuilder.Entity("Entidades.Professor", b =>
                {
                    b.Navigation("ListaAulas");
                });
#pragma warning restore 612, 618
        }
    }
}
